//显示声明周期


//“print_refs”使用对“i32”的两个引用，这两个引用具有不同的
//寿命“a”和“b”。这两个生命必须都在
//至少与函数“print_refs”一样长。
fn print_refs<'a,'b>(x: &'a i32, y: &'b i32){
    println!("x is {} and y is  {}",x,y);
}

//一个不带参数，但有一个生存期参数“A”的函数。
fn failed_borrow<'a>() {
    
    
    let _x = 12;
    //错误：`_x`寿命不够长
    let y: &i32 = &_x;
    //试图将生存期“a”用作显式类型批注
    //函数内部将失败，因为“&_x”的寿命较短
    //而不是“y”。一个短暂的生命不能被强迫变成一个更长的生命。
}

fn main() {
    let (four,nine) = (4,9);
    
    //两个变量的借项（`&`）都被传递到函数中。
    print_refs(&four,&nine);
    //任何被借用的输入都必须比借用者的寿命长。
    //换句话说，“四”和“九”的寿命必须
    //比`print_refs的长度长`
    
    failed_borrow();
    //“failed_browrow”不包含强制“”成为的引用
    //比函数的寿命长，但“a”更长。
    //因为生存期从未受到限制，所以它默认为“静态”。
}